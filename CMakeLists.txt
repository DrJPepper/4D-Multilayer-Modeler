cmake_minimum_required(VERSION 3.0...3.21.1)

project(4d_modeler)

include(ExternalProject)
find_package(Git REQUIRED)

ExternalProject_Add(
    doctest
    PREFIX ${CMAKE_BINARY_DIR}/doctest
    GIT_REPOSITORY https://github.com/doctest/doctest.git
    TIMEOUT 10
    UPDATE_COMMAND ${GIT_EXECUTABLE} pull
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
    LOG_DOWNLOAD ON
)

# Expose required variable (DOCTEST_INCLUDE_DIR) to parent scope
ExternalProject_Get_Property(doctest source_dir)
set(DOCTEST_INCLUDE_DIR ${source_dir}/doctest CACHE INTERNAL "Path to include folder for doctest")

set(CMAKE_BUILD_TYPE Release)

set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DDOCTEST_CONFIG_DISABLE")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_CXX_FLAGS "-Wall -O2 -fcompare-debug-second")
set(CMAKE_CXX_FLAGS_DEBUG "-ggdb")
set(GCC_COVERAGE_COMPILE_FLAGS "-fPIC -fopenmp")
set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)

IF( $ENV{QT_VERSION_TO_USE} STREQUAL 5 )
    find_package(Qt5 5.15 REQUIRED COMPONENTS Core Widgets Gui Concurrent Multimedia)
    find_package(Qt5Multimedia)
elseif($ENV{QT_VERSION_TO_USE} STREQUAL 6)
    find_package(Qt6 REQUIRED COMPONENTS Core Widgets Gui Concurrent Multimedia)
    #find_package(Qt6Multimedia)
else()
    message( FATAL_ERROR "ERROR: Invalid QT_VERSION_TO_USE envar provided (must be 5 or 6)" )
endif()

#find_package(Qt5 COMPONENTS Core Widgets Gui REQUIRED)
find_package(VTK REQUIRED)
find_package(Boost 1.45.0 COMPONENTS graph system filesystem iostreams)
find_package (Eigen3 REQUIRED NO_MODULE)
find_package(fmt)

add_subdirectory(lib/libShapeOp)
include_directories(${CMAKE_CURRENT_BINARY_DIR} ${Boost_INCLUDE_DIRS} ${VTK_INCLUDE_DIRS} ${DOCTEST_INCLUDE_DIR} ./lib ./lib/libShapeOp/src)

file(GLOB UI_FILES *.ui)
file(GLOB HEADER_FILES
    *.h
    *.hpp
    )
file(GLOB CXX_FILES
    *.cxx
    *.cpp
    )
# add header files which are generated by qt
qt_wrap_ui(UISrcs ${UI_FILES})
qt_wrap_cpp(CXX_FILES widget.h)

add_executable(${PROJECT_NAME} ${OS_BUNDLE} ${HEADER_FILES} ${CXX_FILES} ${UISrcs})

set_property(TARGET 4d_modeler PROPERTY CXX_STANDARD 20)

target_link_libraries(${PROJECT_NAME} Qt::Core Qt::Widgets Qt::Gui ${VTK_LIBRARIES} ${Boost_LIBRARIES} ${DOCTEST_LIBRARIES} ShapeOp Eigen3::Eigen fmt::fmt)
